--- src-original/numpy/core/setup.py    2021-11-04 11:34:22.000000000 +0000
+++ src/numpy/core/setup.py     2021-11-14 14:32:42.777594473 +0000
@@ -632,7 +632,8 @@
     if sys.platform[:3] == "aix":
         config.add_define_macros([("_LARGE_FILES", None)])
     else:
-        config.add_define_macros([("_FILE_OFFSET_BITS", "64")])
+        # Chaquopy disabled: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+        # config.add_define_macros([("_FILE_OFFSET_BITS", "64")])
         config.add_define_macros([('_LARGEFILE_SOURCE', '1')])
         config.add_define_macros([('_LARGEFILE64_SOURCE', '1')])

@@ -760,6 +761,7 @@
                            join('src', 'common', 'python_xerbla.c'),
                           ])
     else:
+        raise Exception("BLAS not found")  # Chaquopy: fail the build if this happens.
         extra_info = {}

     #######################################################################
diff -ur src-original/numpy/distutils/fcompiler/__init__.py src/numpy/distutils/fcompiler/__init__.py
--- src-original/numpy/distutils/fcompiler/__init__.py	2018-02-28 17:03:26.000000000 +0000
+++ src/numpy/distutils/fcompiler/__init__.py	2018-04-22 17:09:52.812356493 +0000
@@ -333,9 +333,14 @@
                 unique_possibles.append(e)
 
             for exe in unique_possibles:
-                fc_exe = cached_find_executable(exe)
+                # Chaquopy: handle multi-word executables like LDSHARED="path/to/gcc -shared"
+                exe_split = split_quoted(exe)
+                fc_exe = cached_find_executable(exe_split[0])
                 if fc_exe:
                     cmd[0] = fc_exe
+                    for arg in exe_split[1:]:
+                        if arg not in cmd:
+                            cmd.append(arg)
                     return fc_exe
             self.set_command(exe_key, None)
             return None
diff -ur src-original/numpy/distutils/npy_pkg_config.py src/numpy/distutils/npy_pkg_config.py
--- src-original/numpy/distutils/npy_pkg_config.py	2018-02-28 17:03:26.000000000 +0000
+++ src/numpy/distutils/npy_pkg_config.py	2018-04-22 13:36:27.265045865 +0000
@@ -312,15 +312,14 @@
 
     # FIXME: document this. If pkgname is defined in the variables section, and
     # there is no pkgdir variable defined, pkgdir is automatically defined to
-    # the path of pkgname. This requires the package to be imported to work
+    # the path of pkgname.
+    # Chaquopy: edited to use find_module so the module doesn't have to be imported.
     if not 'pkgdir' in vars and "pkgname" in vars:
+        import imp
         pkgname = vars["pkgname"]
-        if not pkgname in sys.modules:
-            raise ValueError("You should import %s to get information on %s" %
-                             (pkgname, meta["name"]))
-
-        mod = sys.modules[pkgname]
-        vars["pkgdir"] = _escape_backslash(os.path.dirname(mod.__file__))
+        pkgs = pkgname.split(".")
+        _, top_dir, _ = imp.find_module(pkgs[0])
+        vars["pkgdir"] = _escape_backslash(os.path.join(top_dir, *pkgs[1:]))
 
     return LibraryInfo(name=meta["name"], description=meta["description"],
             version=meta["version"], sections=sections, vars=VariableSet(vars))
diff -ur src-original/numpy/f2py/f90mod_rules.py src/numpy/f2py/f90mod_rules.py
--- src-original/numpy/f2py/f90mod_rules.py    2018-02-28 17:03:26.000000000 +0000
+++ src/numpy/f2py/f90mod_rules.py     2018-04-22 19:42:24.178863635 +0000
@@ -46,6 +46,19 @@
             ret = ret + findf90modules(b)
     return ret
 
+# Chaquopy: get this from the generated header file rather than the build machine.
+import os
+import pkgutil
+numpyconfig_h = pkgutil.get_data("numpy", "core/include/numpy/_numpyconfig.h").decode("UTF-8")
+for line in numpyconfig_h.splitlines():
+    words = line.split()
+    # This is valid because npy_common.h has `#define NPY_SIZEOF_INTP NPY_SIZEOF_PY_INTPTR_T`.
+    if (len(words) == 3) and (words[:2] == ["#define", "NPY_SIZEOF_PY_INTPTR_T"]):
+        SIZEOF_INTP = int(words[2])
+        break
+else:
+    raise Exception("Couldn't determine SIZEOF_INTP")
+
 fgetdims1 = """\
       external f2pysetdata
       logical ns
@@ -62,7 +75,7 @@
             deallocate(d)
          end if
       end if
-      if ((.not.allocated(d)).and.(s(1).ge.1)) then""" % np.intp().itemsize
+      if ((.not.allocated(d)).and.(s(1).ge.1)) then""" % SIZEOF_INTP
 
 fgetdims2 = """\
       end if
--- src-original/numpy/linalg/setup.py  2021-11-04 11:34:22.000000000 +0000
+++ src/numpy/linalg/setup.py   2021-11-14 13:25:47.735131016 +0000
@@ -33,6 +33,8 @@
     use_lapack_lite = not lapack_info

     if use_lapack_lite:
+        raise Exception("LAPACK not found")  # Chaquopy: fail the build if this happens.
+
         # This makes numpy.distutils write the fact that lapack_lite
         # is being used to numpy.__config__
         class numpy_linalg_lapack_lite(system_info):
diff -ur src-original/numpy/random/setup.py src/numpy/random/setup.py
--- src-original/numpy/random/setup.py  2021-11-04 11:34:22.000000000 +0000
+++ src/numpy/random/setup.py   2021-11-07 22:58:46.949580497 +0000
@@ -26,7 +26,8 @@
     if sys.platform[:3] == 'aix':
         defs = [('_LARGE_FILES', None)]
     else:
-        defs = [('_FILE_OFFSET_BITS', '64'),
+        defs = [# Chaquopy disabled: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+                # ('_FILE_OFFSET_BITS', '64'),
                 ('_LARGEFILE_SOURCE', '1'),
                 ('_LARGEFILE64_SOURCE', '1')]

diff -ur src-original/numpy/__init__.py src/numpy/__init__.py
--- src-original/numpy/__init__.py	2018-02-28 17:03:26.000000000 +0000
+++ src/numpy/__init__.py	2018-04-22 16:48:56.253279855 +0000
@@ -121,6 +121,15 @@
 
 if __NUMPY_SETUP__:
     sys.stderr.write('Running from numpy source directory.\n')
+
+    # Chaquopy: the module namespace was originally empty in this mode, but the following
+    # things are needed by packages which use NumPy's native API.
+    def get_include():
+        import os
+        return os.path.join(os.path.dirname(__file__), 'core', 'include')
+
+    from .version import version as __version__
+
 else:
     try:
         from numpy.__config__ import show as show_config
--- src-original/setup.py       1970-01-01 00:00:00.000000000 +0000
+++ src/setup.py        2023-12-06 09:28:00.475265227 +0000
@@ -28,6 +28,9 @@
 # a lot more robust than what was previously being used.
 builtins.__NUMPY_SETUP__ = True
 
+# Chaquopy
+os.environ["OPENBLAS"] = os.path.abspath("../requirements/chaquopy/lib")
+
 # Needed for backwards code compatibility below and in some CI scripts.
 # The version components are changed from ints to strings, but only VERSION
 # seems to matter outside of this module and it was already a str.
@@ -82,7 +85,9 @@
     except KeyError:
         os.environ['SETUPTOOLS_USE_DISTUTILS'] = "stdlib"
     else:
-        if setuptools_use_distutils != "stdlib":
+        # Chaquopy: SETUPTOOLS_USE_DISTUTILS=stdlib doesn't work on Python 3.12,
+        # but the setuptools version in meta.yaml still works for now.
+        if False and setuptools_use_distutils != "stdlib":
             raise RuntimeError("setuptools versions >= '60.0.0' require "
                     "SETUPTOOLS_USE_DISTUTILS=stdlib in the environment")
 
--- src-original/pyproject.toml	1970-01-01 00:00:00.000000000 +0000
+++ src/pyproject.toml	2023-12-06 08:34:11.926771744 +0000
@@ -1,6 +1,5 @@
 [build-system]
-build-backend = "mesonpy"
-backend-path = ['./vendored-meson/meson-python']
+# Chaquopy: disabled meson, since the setuptools build still works for now
 requires = [
     "Cython>=0.29.34,<3.1",
     # All dependencies of the vendored meson-python (except for meson, because
