--- src-original/setup.py       2021-01-19 11:18:11.824012300 +0000
+++ src/setup.py        2021-02-27 13:51:59.462611504 +0000
@@ -23,6 +23,12 @@
     # Python 2 compat: just to be able to declare that Python >=3.8 is needed.
     import __builtin__ as builtins
 
+# Chaquopy
+os.environ["PYTHON_CROSSENV"] = "x"  # Used in sklearn/_build_utils.
+os.environ["OPENBLAS"] = os.path.abspath("../requirements/chaquopy/lib")
+builtins.__NUMPY_SETUP__ = True  # Prevent the compiled parts from being imported.
+builtins.__SCIPY_SETUP__ = True  #
+
 # This is a bit (!) hackish: we are setting a global variable so that the main
 # sklearn __init__ can detect if it is being loaded by the setup routine, to
 # avoid attempting to load components that aren't built yet.
@@ -139,6 +146,10 @@
                 e.extra_compile_args += openmp_flag
                 e.extra_link_args += openmp_flag
 
+            # Chaquopy
+            for e in self.extensions:
+                e.libraries += ["atomic"]
+
         build_ext.build_extensions(self)

     def run(self):
--- src-original/sklearn/preprocessing/_csr_polynomial_expansion.pyx	2023-10-23 10:11:35.000000000 +0000
+++ src/sklearn/preprocessing/_csr_polynomial_expansion.pyx	2023-12-07 13:27:03.843087470 +0000
@@ -20,7 +20,9 @@
     """
     #ifdef __SIZEOF_INT128__
         typedef __int128 LARGEST_INT_t;
-    #elif (__clang__ || __EMSCRIPTEN__) && !__i386__
+
+    // Chaquopy: added __arm__
+    #elif (__clang__ || __EMSCRIPTEN__) && !(__i386__ || __arm__)
         typedef _BitInt(128) LARGEST_INT_t;
     #else
         typedef long long LARGEST_INT_t;
