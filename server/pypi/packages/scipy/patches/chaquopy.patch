diff -aur src-orig/scipy/__init__.py src/scipy/__init__.py
--- src-orig/scipy/__init__.py	2023-09-20 11:08:01.936923429 +0200
+++ src/scipy/__init__.py	2023-09-21 13:13:09.267906353 +0200
@@ -64,50 +64,54 @@
 
 __all__ = __dir__()
 
-from numpy import show_config as show_numpy_config
-if show_numpy_config is None:
-    raise ImportError(
-        "Cannot import SciPy when running from NumPy source directory.")
-from numpy import __version__ as __numpy_version__
-
-# Import numpy symbols to scipy name space (DEPRECATED)
-from ._lib.deprecation import _deprecated
-import numpy as _num
-linalg = None
-_msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
-        'use numpy.{0} instead')
-# deprecate callable objects, skipping classes
-for _key in _num.__all__:
-    _fun = getattr(_num, _key)
-    if callable(_fun) and not isinstance(_fun, type):
-        _fun = _deprecated(_msg.format(_key))(_fun)
-    globals()[_key] = _fun
-from numpy.random import rand, randn
-_msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
-        'use numpy.random.{0} instead')
-rand = _deprecated(_msg.format('rand'))(rand)
-randn = _deprecated(_msg.format('randn'))(randn)
-# fft is especially problematic, so was removed in SciPy 1.6.0
-from numpy.fft import ifft
-ifft = _deprecated('scipy.ifft is deprecated and will be removed in SciPy '
-                   '2.0.0, use scipy.fft.ifft instead')(ifft)
-import numpy.lib.scimath as _sci
-_msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
-        'use numpy.lib.scimath.{0} instead')
-for _key in _sci.__all__:
-    _fun = getattr(_sci, _key)
-    if callable(_fun):
-        _fun = _deprecated(_msg.format(_key))(_fun)
-    globals()[_key] = _fun
-
-__all__ += _num.__all__
-__all__ += ['randn', 'rand', 'ifft']
-
-del _num
-# Remove the linalg imported from NumPy so that the scipy.linalg package can be
-# imported.
-del linalg
-__all__.remove('linalg')
+# Chaquopy: don't import numpy during build.
+try:
+    __SCIPY_SETUP__
+except NameError:
+    from numpy import show_config as show_numpy_config
+    if show_numpy_config is None:
+        raise ImportError(
+            "Cannot import SciPy when running from NumPy source directory.")
+    from numpy import __version__ as __numpy_version__
+
+    # Import numpy symbols to scipy name space (DEPRECATED)
+    from ._lib.deprecation import _deprecated
+    import numpy as _num
+    linalg = None
+    _msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
+            'use numpy.{0} instead')
+    # deprecate callable objects, skipping classes
+    for _key in _num.__all__:
+        _fun = getattr(_num, _key)
+        if callable(_fun) and not isinstance(_fun, type):
+            _fun = _deprecated(_msg.format(_key))(_fun)
+        globals()[_key] = _fun
+    from numpy.random import rand, randn
+    _msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
+            'use numpy.random.{0} instead')
+    rand = _deprecated(_msg.format('rand'))(rand)
+    randn = _deprecated(_msg.format('randn'))(randn)
+    # fft is especially problematic, so was removed in SciPy 1.6.0
+    from numpy.fft import ifft
+    ifft = _deprecated('scipy.ifft is deprecated and will be removed in SciPy '
+                    '2.0.0, use scipy.fft.ifft instead')(ifft)
+    import numpy.lib.scimath as _sci
+    _msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
+            'use numpy.lib.scimath.{0} instead')
+    for _key in _sci.__all__:
+        _fun = getattr(_sci, _key)
+        if callable(_fun):
+            _fun = _deprecated(_msg.format(_key))(_fun)
+        globals()[_key] = _fun
+
+    __all__ += _num.__all__
+    __all__ += ['randn', 'rand', 'ifft']
+
+    del _num
+    # Remove the linalg imported from NumPy so that the scipy.linalg package can be
+    # imported.
+    del linalg
+    __all__.remove('linalg')
 
 # We first need to detect if we're being called as part of the SciPy
 # setup procedure itself in a reliable manner.
@@ -121,6 +125,10 @@
     import sys as _sys
     _sys.stderr.write('Running from SciPy source directory.\n')
     del _sys
+
+    # Chaquopy: the module namespace was originally empty in this mode, but the following
+    # things are neded by the scikit-learn build.
+    from scipy.version import version as __version__
 else:
     try:
         from scipy.__config__ import show as show_config
diff -aur src-orig/scipy/_lib/_testutils.py src/scipy/_lib/_testutils.py
--- src-orig/scipy/_lib/_testutils.py	2023-09-20 11:08:01.940923505 +0200
+++ src/scipy/_lib/_testutils.py	2023-09-21 13:13:08.763896205 +0200
@@ -86,9 +86,10 @@
     `self.partialfunc`: A function used to freeze some non-array argument
                         that of no interests in the original function
     '''
-    ALL_INTEGER = [np.int8, np.int16, np.int32, np.int64, np.intc, np.intp]
-    ALL_FLOAT = [np.float32, np.float64]
-    ALL_COMPLEX = [np.complex64, np.complex128]
+    # Chaquopy: disabled since we don't have a usable NumPy at build time
+    # ALL_INTEGER = [np.int8, np.int16, np.int32, np.int64, np.intc, np.intp]
+    # ALL_FLOAT = [np.float32, np.float64]
+    # ALL_COMPLEX = [np.complex64, np.complex128]
 
     def setup_method(self):
         self.arguments = {}
diff -aur src-orig/scipy/sparse/linalg/_propack/setup.py src/scipy/sparse/linalg/_propack/setup.py
--- src-orig/scipy/sparse/linalg/_propack/setup.py	2023-09-20 11:08:03.624955562 +0200
+++ src/scipy/sparse/linalg/_propack/setup.py	2023-09-21 13:13:09.407909172 +0200
@@ -1,12 +1,14 @@
 from os.path import join
+from os import getenv
 import pathlib
 
-import numpy as np
+# Chaquopy: we remove import numpy as np
 
 
 def _is_32bit():
-    return np.intp(0).itemsize < 8
-
+    # Chaquopy: check 32/64 bit based on ABI instead of numpy
+    # np.intp(0).itemsize < 8  
+    return getenv('HOST') in ["arm-linux-androideabi", "i686-linux-android"]    
 
 def check_propack_submodule():
     if not (pathlib.Path(__file__).parent / 'PROPACK/README').exists():
diff -aur src-orig/scipy/special/ellint_carlson_cpp_lite/ellint_arith_aux.hh src/scipy/special/ellint_carlson_cpp_lite/ellint_arith_aux.hh
--- src-orig/scipy/special/ellint_carlson_cpp_lite/ellint_arith_aux.hh	2023-09-20 11:08:03.696956933 +0200
+++ src/scipy/special/ellint_carlson_cpp_lite/ellint_arith_aux.hh	2023-09-21 13:13:09.439909816 +0200
@@ -5,6 +5,8 @@
 #include <cstddef>
 #include "ellint_typing.hh"

+// Chaquopy: added <algorithm>
+#include <algorithm>
 
 /* Auxiliary floating-point manipulation utilities.
  * Ref:
diff -aur src-orig/scipy/special/_generate_pyx.py src/scipy/special/_generate_pyx.py
--- src-orig/scipy/special/_generate_pyx.py	2023-09-20 11:08:03.676956552 +0200
+++ src/scipy/special/_generate_pyx.py	2023-09-21 13:13:09.443909897 +0200
@@ -230,7 +230,7 @@
 import textwrap
 from typing import List
 
-import numpy
+# Chaquopy: skip "import numpy"
 
 
 BASE_DIR = os.path.abspath(os.path.dirname(__file__))
@@ -923,7 +923,13 @@
         all_codes = tuple([codes for _unused, codes in fused_types])
 
         codelens = [len(x) for x in all_codes]
-        last = numpy.prod(codelens) - 1
+
+        # Chaquopy: replace numpy.prod(codelens) - 1
+        last = 1
+        for x in codelens:
+            last *= x
+        last -= 1
+
         for m, codes in enumerate(itertools.product(*all_codes)):
             fused_codes, decs = [], []
             for n, fused_type in enumerate(fused_types):
diff -aur src-orig/scipy/special/utils/makenpz.py src/scipy/special/utils/makenpz.py
--- src-orig/scipy/special/utils/makenpz.py	2023-09-20 11:08:03.708957161 +0200
+++ src/scipy/special/utils/makenpz.py	2023-09-21 13:13:09.447909977 +0200
@@ -6,7 +6,8 @@
 """
 
 import os
-import numpy as np
+# Chaquopy: removed `import numpy`: we will "Skip rebuilding if no sources" below, so it's not
+# needed.
 import argparse
 
 from distutils.util import newer  # type: ignore
diff -aur src-orig/scipy/stats/_generate_pyx.py src/scipy/stats/_generate_pyx.py
--- src-orig/scipy/stats/_generate_pyx.py	2023-09-20 11:08:03.708957161 +0200
+++ src/scipy/stats/_generate_pyx.py	2023-09-21 13:13:09.463910299 +0200
@@ -8,6 +8,10 @@
     A new random C API was added in 1.18 and became stable in 1.19.
     Prefer the new random C API when building with recent numpy.
     '''
+    # Chaquopy: prevent the compiled parts of NumPy from being imported
+    import builtins
+    builtins.__NUMPY_SETUP__ = True
+
     import numpy as np
     ver = tuple(int(num) for num in np.__version__.split('.')[:2])
     return ver < (1, 19)
diff -aur src-orig/setup.py src/setup.py
--- src-orig/setup.py	2023-09-20 11:08:03.732957618 +0200
+++ src/setup.py	2023-09-21 13:13:08.707895078 +0200
@@ -32,6 +32,15 @@
 
 import builtins
 
+# Chaquopy
+with open(os.path.join(os.path.dirname(__file__), "site.cfg"), "w") as site_file:
+    site_file.write("[openblas]\n"
+                    "library_dirs = {reqs_dir}/lib\n"
+                    "include_dirs = {reqs_dir}/include\n"
+                    .format(reqs_dir=os.path.abspath("../requirements/chaquopy")))
+
+# Chaquopy: prevent the compiled parts NumPy from being imported
+builtins.__NUMPY_SETUP__ = True
 
 CLASSIFIERS = """\
 Development Status :: 5 - Production/Stable

